// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `GotoPoint.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GotoPoint_h__
#define __GotoPoint_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGotoPoint
{

class GotoPoint;
class GotoPointPrx;

}

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Object
{
public:

    using ProxyType = GotoPointPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void go(::std::string, float, float, float, const ::Ice::Current&) = 0;
    bool _iceD_go(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void turn(float, const ::Ice::Current&) = 0;
    bool _iceD_turn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop(const ::Ice::Current&) = 0;
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool atTarget(const ::Ice::Current&) = 0;
    bool _iceD_atTarget(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompGotoPoint
{

class GotoPointPrx : public virtual ::Ice::Proxy<GotoPointPrx, ::Ice::ObjectPrx>
{
public:

    void go(const ::std::string& iceP_nodo, float iceP_x, float iceP_y, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_go, iceP_nodo, iceP_x, iceP_y, iceP_alpha, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto goAsync(const ::std::string& iceP_nodo, float iceP_x, float iceP_y, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_go, iceP_nodo, iceP_x, iceP_y, iceP_alpha, context);
    }

    ::std::function<void()>
    goAsync(const ::std::string& iceP_nodo, float iceP_x, float iceP_y, float iceP_alpha,
            ::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_go, iceP_nodo, iceP_x, iceP_y, iceP_alpha, context);
    }

    void _iceI_go(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, float, float, float, const ::Ice::Context&);

    void turn(float iceP_speed, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_turn, iceP_speed, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto turnAsync(float iceP_speed, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_turn, iceP_speed, context);
    }

    ::std::function<void()>
    turnAsync(float iceP_speed,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_turn, iceP_speed, context);
    }

    void _iceI_turn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void stop(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_stop, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_stop, context);
    }

    ::std::function<void()>
    stopAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_stop, context);
    }

    void _iceI_stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    bool atTarget(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_atTarget, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto atTargetAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_atTarget, context);
    }

    ::std::function<void()>
    atTargetAsync(::std::function<void(bool)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompGotoPoint::GotoPointPrx::_iceI_atTarget, context);
    }

    void _iceI_atTarget(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    GotoPointPrx() = default;
    friend ::std::shared_ptr<GotoPointPrx> IceInternal::createProxy<GotoPointPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

}

namespace RoboCompGotoPoint
{

using GotoPointPtr = ::std::shared_ptr<GotoPoint>;
using GotoPointPrxPtr = ::std::shared_ptr<GotoPointPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGotoPoint
{

class GotoPoint;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGotoPoint::GotoPoint>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompGotoPoint::GotoPoint*);

}

}

namespace RoboCompGotoPoint
{

class GotoPoint;
::Ice::Object* upCast(::RoboCompGotoPoint::GotoPoint*);
typedef ::IceInternal::Handle< ::RoboCompGotoPoint::GotoPoint> GotoPointPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGotoPoint::GotoPoint> GotoPointPrx;
typedef GotoPointPrx GotoPointPrxPtr;
void _icePatchObjectPtr(GotoPointPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompGotoPoint
{

class Callback_GotoPoint_go_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_go_Base> Callback_GotoPoint_goPtr;

class Callback_GotoPoint_turn_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_turn_Base> Callback_GotoPoint_turnPtr;

class Callback_GotoPoint_stop_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_stop_Base> Callback_GotoPoint_stopPtr;

class Callback_GotoPoint_atTarget_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GotoPoint_atTarget_Base> Callback_GotoPoint_atTargetPtr;

}

namespace IceProxy
{

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Proxy<GotoPoint, ::IceProxy::Ice::Object>
{
public:

    void go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_go(_iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::RoboCompGotoPoint::Callback_GotoPoint_goPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_go(const ::std::string& iceP_nodo, ::Ice::Float iceP_x, ::Ice::Float iceP_y, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_goPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_go(iceP_nodo, iceP_x, iceP_y, iceP_alpha, context, del, cookie);
    }

    void end_go(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_go(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void turn(::Ice::Float iceP_speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_turn(_iceI_begin_turn(iceP_speed, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float iceP_speed, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_turn(iceP_speed, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float iceP_speed, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(iceP_speed, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float iceP_speed, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(iceP_speed, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float iceP_speed, const ::RoboCompGotoPoint::Callback_GotoPoint_turnPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(iceP_speed, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_turn(::Ice::Float iceP_speed, const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_turnPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_turn(iceP_speed, context, del, cookie);
    }

    void end_turn(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_turn(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stop(_iceI_begin_stop(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stop(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::RoboCompGotoPoint::Callback_GotoPoint_stopPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_stopPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, del, cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stop(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool atTarget(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_atTarget(_iceI_begin_atTarget(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_atTarget(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::RoboCompGotoPoint::Callback_GotoPoint_atTargetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_atTarget(const ::Ice::Context& context, const ::RoboCompGotoPoint::Callback_GotoPoint_atTargetPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_atTarget(context, del, cookie);
    }

    bool end_atTarget(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_atTarget(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompGotoPoint
{

class GotoPoint : public virtual ::Ice::Object
{
public:

    typedef GotoPointPrx ProxyType;
    typedef GotoPointPtr PointerType;

    virtual ~GotoPoint();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void go(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_go(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void turn(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_turn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool atTarget(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_atTarget(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const GotoPoint& lhs, const GotoPoint& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GotoPoint& lhs, const GotoPoint& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

}

namespace RoboCompGotoPoint
{

template<class T>
class CallbackNC_GotoPoint_go : public Callback_GotoPoint_go_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_go<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GotoPoint_go : public Callback_GotoPoint_go_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_go(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_goPtr
newCallback_GotoPoint_go(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_go<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GotoPoint_turn : public Callback_GotoPoint_turn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_turn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_turn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GotoPoint_turn : public Callback_GotoPoint_turn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_turn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_turnPtr
newCallback_GotoPoint_turn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_turn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GotoPoint_stop : public Callback_GotoPoint_stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GotoPoint_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_stop<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GotoPoint_stop : public Callback_GotoPoint_stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GotoPoint_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_stopPtr
newCallback_GotoPoint_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GotoPoint_atTarget : public Callback_GotoPoint_atTarget_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_GotoPoint_atTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGotoPoint::GotoPointPrx proxy = ::RoboCompGotoPoint::GotoPointPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_atTarget(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_atTarget<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GotoPoint_atTarget<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GotoPoint_atTarget : public Callback_GotoPoint_atTarget_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_GotoPoint_atTarget(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompGotoPoint::GotoPointPrx proxy = ::RoboCompGotoPoint::GotoPointPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_atTarget(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_atTarget<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GotoPoint_atTargetPtr
newCallback_GotoPoint_atTarget(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GotoPoint_atTarget<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
